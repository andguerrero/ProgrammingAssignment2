makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector
makeVector()
makeVector(10)
makeVector(c(1:10))
a<-makeVector(c(1:10))
a
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(a)
cachemean()
cachemean(c(1:10))
makeVector(10)
x<-1-
x<-10
makeVector(x)
cachemean(x)
a<-matrix(1:4,2,2)
a
solve(a)
source('~/GitHub/R-Programming/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/R-Programming/ProgrammingAssignment2/cachematrix.R')
## Write a short comment describing this function
#The makeCacheMatrix function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
#The cacheSolve function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
}
source('~/GitHub/R-Programming/ProgrammingAssignment2/cachematrix.R')
#The makeCacheMatrix function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
#The cacheSolve function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
a<-matrix(1:4,2,2)
a
a2<-makeCacheMatrix(a)
a2
a2$get()
a2$getinverse()
cacheSolve(a2)
a2$getinverse()
cacheSolve(a2)
a2$set(matrix(c(1,-5,0,0,1,0,0,0,1),3,3))
a2$getinverse()
cacheSolve(a2)
cacheSolve(a2)
a2$get()
a<-makeCacheMatrix(matrix(c(1,-5,0,0,1,-5,-3,-5,-6),3,3))
a$get()
a$getinverse()
cacheSolve(a)
a$getinverse()
cacheSolve(a)
source('~/GitHub/R-Programming/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/R-Programming/ProgrammingAssignment2/cachematrix.R')
a2<-makeCacheMatrix(matrix(1:4,2,2))
a2
a2$get
a2$get()
a2$getinverse()
cachesolve(a2)
cacheSolve(a2)
cacheSolve(a2)
a2$getinverse()
a2$get()
